Задача 1
Сценарий выполнения задачи:

создайте свой репозиторий на https://hub.docker.com;
выберите любой образ, который содержит веб-сервер Nginx;
создайте свой fork образа;
реализуйте функциональность: запуск веб-сервера в фоне с индекс-страницей, содержащей HTML-код ниже:
<html>
<head>
Hey, Netology
</head>
<body>
<h1>I’m DevOps Engineer!</h1>
</body>
</html>
Опубликуйте созданный fork в своём репозитории и предоставьте ответ в виде ссылки на https://hub.docker.com/username_repo.


ОТВЕТ:
  docker ps -a  
  docker exec -it nginx-server bash  
    echo '<html><head>Hey, Netology</head><body><h1>DevOps Engineer!</h1></body></html>' > /usr/share/nginx/html/default.html

      docker cp nginx-server:/etc/nginx/nginx.conf nginx.conf

 
> Dockerfile

      FROM nginx
      COPY nginx.conf /etc/nginx/nginx.conf
      RUN echo '<html><head>Hey, Netology</head><body><h1>I’m DevOps Engineer!</h1></body></html>' > /usr/share/nginx/html/default.html

Создаем репозиторий slava1005/nginx_netology на сайте https://hub.docker.com
Создаем image

      docker build -t nginx_netology .  
      docker tag nginx_netology slava1005/nginx_netology  
      docker login -u slava1005  
      docker push slava1005/nginx_netology:latest 
     
      Ссылка на репозиторий https://hub.docker.com/repository/docker/slava1005/nginx_netology/general

Задача 2
Посмотрите на сценарий ниже и ответьте на вопрос: «Подходит ли в этом сценарии использование Docker-контейнеров или лучше подойдёт виртуальная машина, физическая машина? 
Может быть, возможны разные варианты?»

Детально опишите и обоснуйте свой выбор.

--
    Сценарий:
Высоконагруженное монолитное java веб-приложение;
ОТВЕТ:
Можно использовать Docker и горизонтальное масштабирование с подсистемой балансировки нагрузки.
ссылка
https://docs.microsoft.com/ru-ru/dotnet/architecture/microservices/architect-microservice-container-applications/containerize-monolithic-applications
Проблема монолитного приложения, в трудности развития приложения.
    Сценарий:
Nodejs веб-приложение;
ОТВЕТ:
Можно использовать Docker, очень удобное решение.
    Сценарий:
Мобильное приложение c версиями для Android и iOS;
ОТВЕТ:
ни один из вариантов, когда делают приложение для смартфонов/телефонов, всегда делают приложение для Андроид или IOS.
Сомневаюсь что возможно сделать приложение, чтобы оно содержало в себе версии и для Андроид и для IOS, это увеличит приложение в разы. 
Знаю, что делают приложения отдельно друг от друга.
    Сценарий:
Шина данных на базе Apache Kafka;
ОТВЕТ:
Вполне можно использовать docker, противопоказаний на сайте kafka не нашел.
ссылка: Отказоустойчивый Kafka кластер в Docker https://dotsandbrackets.com/highly-available-kafka-cluster-docker-ru/
    Сценарий:
Elasticsearch кластер для реализации логирования продуктивного веб-приложения - три ноды elasticsearch, два logstash и две ноды kibana;
ОТВЕТ:
Такое решение называется Elastic stack. Реализуется через Docker 
https://rabota.dev/forum/threads/%D0%A6%D0%B5%D0%BD%D1%82%D1%80%D0%B0%D0%BB%D0%B8%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5-%D0%BB%D0%BE%D0%B3%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B2-docker-%D1%81-%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%D0%BC-elk-stack.1877/
    Сценарий:
Мониторинг-стек на базе Prometheus и Grafana;
ОТВЕТ:
Можно развернуть на Докере. Плюсы: скорость развертывания, возможность масштабирования для различных задач:
    Сценарий:
MongoDB, как основное хранилище данных для java-приложения;
ОТВЕТ:
docker для mongodb существует, но для продакшн систем. В случае если данных много, лучше использовать виртуальную машину.
    Сценарий:
Gitlab сервер для реализации CI/CD процессов и приватный (закрытый) Docker Registry.
ОТВЕТ:
Здесь также возможна реализация с помощью докера.
статья: Докеризация производственной среды Gitlab CI / CD + эксперимент с частным облаком Docker-Registry
https://russianblogs.com/article/47601291480/

Задача 3
Запустите первый контейнер из образа centos c любым тегом в фоновом режиме, подключив папку /data из текущей рабочей директории на хостовой машине в /data контейнера.
Запустите второй контейнер из образа debian в фоновом режиме, подключив папку /data из текущей рабочей директории на хостовой машине в /data контейнера.
Подключитесь к первому контейнеру с помощью docker exec и создайте текстовый файл любого содержания в /data.
Добавьте ещё один файл в папку /data на хостовой машине.
Подключитесь во второй контейнер и отобразите листинг и содержание файлов в /data контейнера.

root@slava:/data# docker run -t -d --name centos1 -v /data:/data centos

docker exec -it centos1 bash
[root@cdd5c7d85bc8 data]# echo 'file centos' > centos_docker.txt
[root@cdd5c7d85bc8 data]# ls -la
total 12
drwxr-xr-x 2 root root 4096 May 28 15:54 .
drwxr-xr-x 1 root root 4096 May 28 15:40 ..
-rw-r--r-- 1 root root   12 May 28 15:54 centos_docker.txt
[root@cdd5c7d85bc8 data]# exit
exit

root@slava:/data# echo 'from host mashine file' > host.txt
root@slava:/data# ls -la
total 16
drwxr-xr-x  2 root root 4096 May 28 15:55 .
drwxr-xr-x 23 root root 4096 May 28 15:39 ..
-rw-r--r--  1 root root   12 May 28 15:54 centos_docker.txt
-rw-r--r--  1 root root   23 May 28 15:55 host.txt

root@slava:/data# docker run -t -d --name debian1 -v /data:/data debian
cfe9a9484e44db594ba54514216e0bd8a9ca2d4c654eac1844ca4d9a2b7705
root@slava:/data#
root@slava:/data# docker exec -it debian1 bash
root@dd53e9d9484e:/# cd data/
root@dd53e9d9484e:/data# ls -la
total 16
drwxr-xr-x 2 root root 4096 May 28 15:55 .
drwxr-xr-x 1 root root 4096 May 28 15:56 ..
-rw-r--r-- 1 root root   12 May 28 15:54 centos_docker.txt
-rw-r--r-- 1 root root   23 May 28 15:55 host.txt
